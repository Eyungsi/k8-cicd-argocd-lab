name: CI/CD â€¢ One app â†’ ECR â†’ ArgoCD

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  id-token: write
  contents: write

env:
  AWS_REGION: us-east-1
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  ECR_REPO: docker-repo
  MANIFEST: deploy1.yaml
  CONTAINER_NAME: app1
  DOCKERFILE: Dockerfile
  DOCKER_CONTEXT: .

jobs:
  # 1) BUILD
  build:
    runs-on: ubuntu-latest
    outputs:
      TAG: ${{ steps.vars.outputs.TAG }}  # pass only non-secret tag
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set tag (local + export for later steps)
        id: vars
        run: |
          TAG="${GITHUB_SHA::7}"
          test -n "$TAG" || { echo "TAG is empty"; exit 1; }
          echo "TAG=$TAG"
          echo "TAG=$TAG" >> "$GITHUB_ENV"
          echo "TAG=$TAG" >> "$GITHUB_OUTPUT"

      - name: Derive image name (local)
        run: |
          IMAGE_NAME="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPO}"
          test -n "$IMAGE_NAME" || { echo "IMAGE_NAME is empty (check AWS_ACCOUNT_ID/ECR_REPO)"; exit 1; }
          echo "Using IMAGE_NAME=$IMAGE_NAME"
          echo "Using TAG=$TAG"
          echo "IMAGE_NAME=$IMAGE_NAME" >> "$GITHUB_ENV"

      # ðŸ”§ Create a Buildx builder (fixes "no builder '.' found")
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build image
        run: |
          docker build \
            -f "${DOCKERFILE}" \
            -t "${IMAGE_NAME}:${TAG}" \
            -t "${IMAGE_NAME}:latest" \
            "${DOCKER_CONTEXT}"

  # 2) TEST / SCAN
  test_scan:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Trivy scan (filesystem)
        uses: aquasecurity/trivy-action@0.24.0
        with:
          scan-type: fs
          path: .
          severity: HIGH,CRITICAL
          ignore-unfixed: true
          exit-code: 0
          format: table
          scanners: vuln,secret,config

  # 3) PUSH TO ECR
  push_image:
    runs-on: ubuntu-latest
    needs: [build, test_scan]
    steps:
      - name: Configure AWS (access keys)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Ensure ECR repo exists
        run: |
          aws ecr describe-repositories --repository-names "${ECR_REPO}" >/dev/null 2>&1 || \
          aws ecr create-repository --repository-name "${ECR_REPO}" >/dev/null

      - name: Login to ECR
        uses: aws-actions/amazon-ecr-login@v2
        id: ecr

      - name: Derive image vars (local for this job)
        run: |
          TAG="${{ needs.build.outputs.TAG }}"
          IMAGE_NAME="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPO}"
          test -n "$TAG" || { echo "TAG is empty"; exit 1; }
          test -n "$IMAGE_NAME" || { echo "IMAGE_NAME is empty"; exit 1; }
          echo "TAG=$TAG" >> "$GITHUB_ENV"
          echo "IMAGE_NAME=$IMAGE_NAME" >> "$GITHUB_ENV"
          echo "Using IMAGE_NAME=$IMAGE_NAME"
          echo "Using TAG=$TAG"

      # ðŸ”§ Create a Buildx builder (fixes "no builder '.' found")
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Rebuild for this job context (same tags)
      - name: Build image (same tags)
        run: |
          docker build \
            -f "${DOCKERFILE}" \
            -t "${IMAGE_NAME}:${TAG}" \
            -t "${IMAGE_NAME}:latest" \
            "${DOCKER_CONTEXT}"

      - name: Push image to ECR
        run: |
          docker push "${IMAGE_NAME}:${TAG}"
          docker push "${IMAGE_NAME}:latest"

  # 4) DEPLOY (GitOps via ArgoCD)
  deploy:
    runs-on: ubuntu-latest
    needs: push_image
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Derive image vars (local for deploy)
        run: |
          TAG="${{ needs.build.outputs.TAG }}"
          IMAGE_NAME="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPO}"
          test -n "$TAG" || { echo "TAG is empty"; exit 1; }
          test -n "$IMAGE_NAME" || { echo "IMAGE_NAME is empty"; exit 1; }
          echo "TAG=$TAG" >> "$GITHUB_ENV"
          echo "IMAGE_NAME=$IMAGE_NAME" >> "$GITHUB_ENV"

      - name: Bump image in manifest (deploy1.yaml)
        uses: mikefarah/yq@v4.44.3
        env:
          NEW_IMAGE: ${{ env.IMAGE_NAME }}:${{ env.TAG }}
          FILE: ${{ env.MANIFEST }}
          CONTAINER: ${{ env.CONTAINER_NAME }}
        with:
          cmd: |
            yq -i '
              (.spec.template.spec.containers[] | select(.name==env(CONTAINER)) | .image) = env(NEW_IMAGE)
            ' "$FILE"
            echo "Updated $FILE -> $NEW_IMAGE"
            grep -n "image:" "$FILE" || true

      - name: Commit & push (Argo CD will sync)
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@users.noreply.github.com"
          git add "${MANIFEST}"
          git commit -m "deploy: ${CONTAINER_NAME} -> ${IMAGE_NAME}:${TAG}" || echo "No changes"
          git push
