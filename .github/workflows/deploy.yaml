name: CI/CD • One app → ECR → ArgoCD

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  id-token: write
  contents: write

env:
  AWS_REGION: us-east-1
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  ECR_REPO: docker-repo
  MANIFEST: deploy1.yaml
  CONTAINER_NAME: app1

jobs:
  # ===== Stage 1: Build + Scan + Push =====
  build:
    runs-on: ubuntu-latest
    outputs:
      TAG: ${{ steps.vars.outputs.TAG }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set image tag
        id: vars
        run: |
          SHORT_TAG="${GITHUB_SHA::7}"
          echo "TAG=$SHORT_TAG" >> "$GITHUB_OUTPUT"
          echo "TAG=$SHORT_TAG" >> "$GITHUB_ENV"

      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Ensure ECR repo exists
        run: |
          aws ecr describe-repositories --repository-names "$ECR_REPO" >/dev/null 2>&1 || \
          aws ecr create-repository --repository-name "$ECR_REPO" >/dev/null

      - name: Login to ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Trivy scan
        uses: aquasecurity/trivy-action@0.24.0
        with:
          scan-type: fs
          path: .
          severity: HIGH,CRITICAL
          output: trivy-fs-results.json
          exit-code: 0
          ignore-unfixed: true

      - name: Build & push image (one stage)
        run: |
          IMAGE_NAME="$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO"
          echo "Using IMAGE_NAME: $IMAGE_NAME"
          echo "Using TAG: $TAG"

          test -n "$IMAGE_NAME" || { echo "IMAGE_NAME is empty"; exit 1; }
          test -n "$TAG" || { echo "TAG is empty"; exit 1; }

          docker build -t "$IMAGE_NAME:$TAG" -t "$IMAGE_NAME:latest" .
          docker push "$IMAGE_NAME:$TAG"
          docker push "$IMAGE_NAME:latest"

  # ===== Stage 2: Deploy =====
  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Reconstruct image name for manifest update
        run: |
          IMAGE_NAME="$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO"
          TAG="${{ needs.build.outputs.TAG }}"
          echo "NEW_IMAGE=$IMAGE_NAME:$TAG" >> $GITHUB_ENV

      - name: Update manifest
        uses: mikefarah/yq@v4.44.3
        with:
          cmd: |
            yq -i '(.spec.template.spec.containers[] | select(.name==env(CONTAINER_NAME)) | .image) = env(NEW_IMAGE)' ${{ env.MANIFEST }}
        env:
          NEW_IMAGE: ${{ env.NEW_IMAGE }}

      - name: Commit & push
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@users.noreply.github.com"
          git add "${{ env.MANIFEST }}"
          git commit -m "deploy: ${{ env.CONTAINER_NAME }} -> ${{ env.NEW_IMAGE }}" || echo "No changes"
          git push
